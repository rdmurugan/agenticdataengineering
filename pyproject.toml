[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agentic-data-engineering"
version = "0.1.0"
description = "Self-healing ingestion and quality platform for Medicaid/Medicare feeds"
authors = [
    {name = "Data Engineering Team", email = "data-eng@healthcare.com"}
]
readme = "README.md"
license = {text = "Custom License - Free for research/learning, commercial use requires written permission"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
keywords = ["healthcare", "data-engineering", "databricks", "self-healing", "medicaid", "medicare"]

dependencies = [
    "databricks-sdk>=0.20.0",
    "pyspark>=3.4.0",
    "delta-spark>=2.4.0",
    "streamlit>=1.28.0",
    "plotly>=5.17.0",
    "pandas>=2.1.0",
    "numpy>=1.25.0",
    "great-expectations>=0.17.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "loguru>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
]
cloud = [
    "boto3>=1.29.0",
    "azure-identity>=1.15.0",
    "azure-storage-blob>=12.19.0",
]
monitoring = [
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.38.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
]

[project.urls]
Homepage = "https://github.com/your-org/agentic-data-engineering"
Documentation = "https://agentic-data-engineering.readthedocs.io/"
Repository = "https://github.com/your-org/agentic-data-engineering"
Issues = "https://github.com/your-org/agentic-data-engineering/issues"

[project.scripts]
healthcare-pipeline = "src.cli:main"
start-dashboard = "src.ui.dashboard:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests", 
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]